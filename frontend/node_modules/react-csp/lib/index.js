"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsdom_1 = require("jsdom");
var chalk_1 = __importDefault(require("chalk"));
var pretty_1 = __importDefault(require("pretty"));
var utils_1 = require("./utils");
var cspSelector = 'meta[http-equiv="Content-Security-Policy"]';
function reactCsp() {
    return __awaiter(this, void 0, void 0, function () {
        var config, html, csp, newHTML;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, utils_1.getConfig()];
                case 1:
                    config = _a.sent();
                    return [4 /*yield*/, utils_1.loadHTML()];
                case 2:
                    html = _a.sent();
                    csp = utils_1.formatCSP(config);
                    newHTML = reshapeHTML(html, csp);
                    return [4 /*yield*/, utils_1.writeToHtml(newHTML)];
                case 3:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
function reshapeHTML(oldHTML, csp) {
    var dom = new jsdom_1.JSDOM(oldHTML);
    var document = dom.window.document;
    var foundCSP = document.querySelector(cspSelector);
    var cspElement = cspToHtmlElement(document, csp);
    if (cspElement === null) {
        throw new Error("Failed to create CSP to html tag");
    }
    if (foundCSP !== null) {
        console.log("Found existing CSP tag " + chalk_1.default.underline("present") + " in the HTML file, replacing it with the new one...");
        foundCSP.replaceWith(cspElement);
    }
    else {
        var head = document.querySelector("head");
        if (!head) {
            throw new Error("No <head /> tag present in the HTML file");
        }
        console.log(chalk_1.default.red("No CSP tag present") + " in the HTML file, inserting it as the first element inside the <head> tag");
        head && head.insertAdjacentElement("afterbegin", cspElement);
    }
    var newHTML = pretty_1.default(dom.serialize(), { ocd: true });
    return newHTML;
}
function cspToHtmlElement(document, csp) {
    var template = document.createElement("template");
    template.innerHTML = csp;
    return template.content.firstChild;
}
exports.default = reactCsp;
//# sourceMappingURL=index.js.map